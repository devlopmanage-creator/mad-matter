---
// No props needed for this component
---

<section id="home">
  <!-- Background with optimized loading -->
  <div class="background">
    <img
      class="background-placeholder"
      id="heroPlaceholder"
      src="https://res.cloudinary.com/doleg7smw/image/upload/c_scale,w_1920,q_auto,f_auto/v1758771282/photo_2025-09-25_00-14-17_kspwix.jpg"
      alt="Building materials showcase"
      loading="eager"
      decoding="async"
      width="1920"
      height="1080"
    />
    <video
      class="background-video active"
      id="heroVideo"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      width="1920"
      height="1080"
    >
      <source src="https://res.cloudinary.com/doleg7smw/video/upload/c_scale,w_1920,q_auto,f_auto/v1758669242/Clip_1_kxpdba.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
    <div class="overlay"></div>
  </div>

  <!-- Content -->
  <div class="content">
    <div class="accent-wrapper" id="accentWrapper">
      <span class="accent" id="heroAccentTop">FAM BUILDING MATERIALS</span>
    </div>
    <h1 id="heroTitle">
      Where Luxury Meets Craftsmanship
      <span class="accent" id="heroAccentBottom">FAM BUILDING MATERIALS</span>
    </h1>
    <p id="heroDescription">
      High-end materials and fixtures crafted to enhance your home. Discover everything you need to redesign your spaces with beauty and lasting strength.
    </p>
  </div>

  <!-- Navigation Buttons -->
  <button class="nav-btn nav-btn-left" aria-label="Previous video" type="button">
    <span class="arrow" aria-hidden="true">‹</span>
  </button>
  <button class="nav-btn nav-btn-right" aria-label="Next video" type="button">
    <span class="arrow" aria-hidden="true">›</span>
  </button>

  <!-- Video indicators -->
  <div class="video-indicators">
    <button class="indicator active" aria-label="Video 1" data-index="0"></button>
    <button class="indicator" aria-label="Video 2" data-index="1"></button>
  </div>
</section>

<style>
  section {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .background {
    position: absolute;
    inset: 0;
    z-index: 0;
    overflow: hidden;
  }

  .background-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    inset: 0;
    z-index: 0;
    transform: scale(1.3) translateZ(0);
    will-change: opacity;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    opacity: 0;
    transition: opacity 0.6s ease-in-out;
  }

  .background-video.active {
    opacity: 1;
  }

  .background-placeholder {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    inset: 0;
    z-index: 0;
    transform: scale(1.3) translateZ(0);
    transition: opacity 0.3s ease-out;
  }

  .background-placeholder.hidden {
    opacity: 0;
  }

  .overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
    z-index: 1;
  }

  .content {
    position: relative;
    z-index: 10;
    text-align: center;
    padding: 0 1.5rem;
    max-width: 64rem;
    margin: 0 auto;
    transition: opacity 0.3s ease-in-out;
  }

  .content-fade-out {
    opacity: 0;
  }

  .content-fade-in {
    animation: fadeInContent 0.6s ease-in-out forwards;
  }

  @keyframes fadeInContent {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  h1 {
    font-family: 'Montserrat', sans-serif;
    font-size: clamp(1.5rem, 4vw, 3.75rem);
    font-weight: 300;
    color: white;
    margin-bottom: 1.5rem;
    white-space: nowrap;
    overflow: visible;
    letter-spacing: 0.03em;
    line-height: 1.3;
  }

  h1.multiline {
    white-space: normal;
    font-size: clamp(1rem, 2.5vw, 1.75rem);
  }

  .accent-wrapper {
    display: none;
  }

  .accent-wrapper.show-top {
    display: block;
    margin-bottom: 1.5rem;
  }

  .accent-wrapper.show-top .accent {
    display: block;
    color: #e8d4a0;
    white-space: normal;
    font-weight: 600;
    letter-spacing: 0.12em;
    text-transform: uppercase;
    font-size: clamp(2rem, 5vw, 4rem);
    text-shadow: 0 2px 8px rgba(232, 212, 160, 0.25);
    margin: 0;
  }

  .accent {
    display: block;
    margin-top: 0.5rem;
    color: #e8d4a0;
    white-space: normal;
    font-weight: 500;
    letter-spacing: 0.12em;
    text-transform: uppercase;
    font-size: 0.8em;
    text-shadow: 0 2px 8px rgba(232, 212, 160, 0.25);
  }

  h1.has-accent-below .accent {
    display: block;
  }

  h1.has-accent-above .accent {
    display: none;
  }

  p {
    font-family: 'Montserrat', sans-serif;
    font-size: clamp(1.125rem, 2vw, 1.25rem);
    font-weight: 300;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 2rem;
    max-width: 42rem;
    margin-left: auto;
    margin-right: auto;
    letter-spacing: 0.015em;
    line-height: 1.6;
  }

  /* Navigation Buttons */
  .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%) translateZ(0);
    z-index: 50;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    will-change: transform, background, opacity;
    opacity: 0;
    visibility: hidden;
  }

  section:hover .nav-btn {
    opacity: 1;
    visibility: visible;
  }

  .nav-btn:focus {
    outline: 2px solid rgba(255, 255, 255, 0.6);
    outline-offset: 3px;
  }

  .nav-btn .arrow {
    font-size: 28px;
    font-weight: 400;
    line-height: 0.9;
    color: white;
    pointer-events: none;
    display: block;
    margin-top: -2px;
  }

  .nav-btn:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.4);
    transform: translateY(-50%) scale(1.05) translateZ(0);
  }

  .nav-btn:active:not(:disabled) {
    transform: translateY(-50%) scale(0.95) translateZ(0);
  }

  .nav-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .nav-btn.hidden {
    opacity: 0 !important;
    visibility: hidden !important;
    pointer-events: none;
  }

  .nav-btn-left {
    left: 1rem;
  }

  .nav-btn-right {
    right: 1rem;
  }

  /* Video Indicators */
  .video-indicators {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 50;
    display: flex;
    gap: 0.75rem;
  }

  .indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
  }

  .indicator:hover {
    background: rgba(255, 255, 255, 0.6);
    transform: scale(1.2);
  }

  .indicator.active {
    background: rgba(232, 212, 160, 0.9);
    transform: scale(1.3);
  }

  .indicator:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .nav-btn {
      width: 44px;
      height: 44px;
      opacity: 1;
      visibility: visible;
    }

    .nav-btn .arrow {
      font-size: 24px;
    }

    .video-indicators {
      bottom: 1.5rem;
    }

    .indicator {
      width: 8px;
      height: 8px;
    }
  }

  @media (max-width: 480px) {
    .nav-btn {
      width: 40px;
      height: 40px;
    }

    .nav-btn .arrow {
      font-size: 22px;
    }

    .video-indicators {
      bottom: 1rem;
    }
  }

  /* Performance optimizations for mobile */
  @media (prefers-reduced-motion: reduce) {
    .background-video,
    .background-placeholder,
    .nav-btn,
    .indicator {
      transition: none;
    }
  }
</style>

<script>
  // Video carousel with optimizations
  const videos = [
    'https://res.cloudinary.com/doleg7smw/video/upload/c_scale,w_1920,q_auto,f_auto/v1758669242/Clip_1_kxpdba.mp4',
    'https://res.cloudinary.com/doleg7smw/video/upload/v1759340239/WONDA_MOVIE__dlaopm.mp4'
  ];

  // Content for each video
  const videoContent = [
    {
      title: 'Where Luxury Meets Craftsmanship',
      accent: 'FAM BUILDING MATERIALS',
      description: 'High-end materials and fixtures crafted to enhance your home. Discover everything you need to redesign your spaces with beauty and lasting strength.'
    },
    {
      title: 'Unbelievable, a sink unlike any other. Defined by innovation, distinguished by design, and unmatched in its uniqueness.',
      accent: 'WONDA',
      description: "It's not just exceptional; it's a WONDA."
    }
  ];

  let currentVideoIndex = 0;
  let isTransitioning = false;
  const videoElement = document.getElementById('heroVideo') as HTMLVideoElement;
  const placeholderElement = document.getElementById('heroPlaceholder') as HTMLImageElement;
  const prevBtn = document.querySelector('.nav-btn-left') as HTMLButtonElement;
  const nextBtn = document.querySelector('.nav-btn-right') as HTMLButtonElement;
  const indicators = document.querySelectorAll('.indicator') as NodeListOf<HTMLButtonElement>;
  const heroTitle = document.getElementById('heroTitle') as HTMLHeadingElement;
  const heroAccentTop = document.getElementById('heroAccentTop') as HTMLSpanElement;
  const heroAccentBottom = document.getElementById('heroAccentBottom') as HTMLSpanElement;
  const heroDescription = document.getElementById('heroDescription') as HTMLParagraphElement;
  const accentWrapper = document.getElementById('accentWrapper') as HTMLDivElement;

  // Hide placeholder when video loads
  if (videoElement && placeholderElement) {
    videoElement.addEventListener('loadeddata', () => {
      placeholderElement.classList.add('hidden');
      videoElement.classList.add('active');
    }, { once: true });
  }

  // Preload next video for smoother transitions
  function preloadVideo(index: number) {
    if (index >= 0 && index < videos.length) {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'video';
      link.href = videos[index];
      document.head.appendChild(link);
    }
  }

  // Update indicators
  function updateIndicators(index: number) {
    indicators.forEach((indicator, i) => {
      indicator.classList.toggle('active', i === index);
      indicator.setAttribute('aria-pressed', String(i === index));
    });
  }

  // Update navigation buttons visibility
  function updateNavigationButtons(index: number) {
    // Hide left button if on first video
    if (prevBtn) {
      prevBtn.classList.toggle('hidden', index === 0);
    }
    
    // Hide right button if on last video
    if (nextBtn) {
      nextBtn.classList.toggle('hidden', index === videos.length - 1);
    }
  }

  // Update content based on video index
  function updateContent(index: number) {
    const content = videoContent[index];
    if (!content) return;

    // Add fade out effect
    const contentElement = document.querySelector('.content') as HTMLElement;
    contentElement?.classList.add('content-fade-out');

    setTimeout(() => {
      // Update text content
      if (heroTitle) {
        // Get only text nodes, not the accent span
        const titleText = heroTitle.childNodes[0];
        if (titleText) {
          titleText.textContent = content.title + ' ';
        }
        
        // Add multiline class for second video (WONDA)
        if (index === 1) {
          heroTitle.classList.add('multiline');
          heroTitle.classList.add('has-accent-above');
          heroTitle.classList.remove('has-accent-below');
        } else {
          heroTitle.classList.remove('multiline');
          heroTitle.classList.remove('has-accent-above');
          heroTitle.classList.add('has-accent-below');
        }
      }
      
      // Show accent at top for WONDA (video 2), otherwise hide
      if (accentWrapper) {
        if (index === 1) {
          accentWrapper.classList.add('show-top');
        } else {
          accentWrapper.classList.remove('show-top');
        }
      }
      
      // Update both accent elements
      if (heroAccentTop) {
        heroAccentTop.textContent = content.accent;
      }
      if (heroAccentBottom) {
        heroAccentBottom.textContent = content.accent;
      }
      if (heroDescription) {
        heroDescription.textContent = content.description;
      }

      // Remove fade out and add fade in
      contentElement?.classList.remove('content-fade-out');
      contentElement?.classList.add('content-fade-in');
      
      setTimeout(() => {
        contentElement?.classList.remove('content-fade-in');
      }, 600);
    }, 300);
  }

  // Change video with smooth transition
  async function changeVideo(newIndex: number) {
    if (isTransitioning || newIndex === currentVideoIndex) return;
    
    // Validate index
    if (newIndex < 0 || newIndex >= videos.length) return;
    
    isTransitioning = true;
    
    // Disable buttons during transition
    if (prevBtn) prevBtn.disabled = true;
    if (nextBtn) nextBtn.disabled = true;

    try {
      // Fade out current video
      videoElement.classList.remove('active');
      
      // Wait for fade out
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Change video source
      const sourceElement = videoElement.querySelector('source') as HTMLSourceElement;
      if (sourceElement) {
        sourceElement.src = videos[newIndex];
        videoElement.load();
        
        // Wait for video to be ready
        await new Promise<void>((resolve, reject) => {
          const onCanPlay = () => {
            videoElement.removeEventListener('canplay', onCanPlay);
            videoElement.removeEventListener('error', onError);
            resolve();
          };
          
          const onError = () => {
            videoElement.removeEventListener('canplay', onCanPlay);
            videoElement.removeEventListener('error', onError);
            reject(new Error('Video load failed'));
          };
          
          videoElement.addEventListener('canplay', onCanPlay, { once: true });
          videoElement.addEventListener('error', onError, { once: true });
        });
        
        // Play and fade in
        await videoElement.play();
        videoElement.classList.add('active');
        
        currentVideoIndex = newIndex;
        updateIndicators(currentVideoIndex);
        updateNavigationButtons(currentVideoIndex);
        updateContent(currentVideoIndex);
        
        // Preload next video
        const nextIndex = (currentVideoIndex + 1) % videos.length;
        preloadVideo(nextIndex);
      }
    } catch (error) {
      console.error('Error changing video:', error);
      // Fallback: show current video again
      videoElement.classList.add('active');
    } finally {
      isTransitioning = false;
      
      // Re-enable buttons
      if (prevBtn) prevBtn.disabled = false;
      if (nextBtn) nextBtn.disabled = false;
    }
  }

  // Navigation handlers
  function handlePrevious() {
    const newIndex = currentVideoIndex === 0 ? videos.length - 1 : currentVideoIndex - 1;
    changeVideo(newIndex);
  }

  function handleNext() {
    const newIndex = (currentVideoIndex + 1) % videos.length;
    changeVideo(newIndex);
  }

  // Event listeners
  if (prevBtn) {
    prevBtn.addEventListener('click', handlePrevious);
  }

  if (nextBtn) {
    nextBtn.addEventListener('click', handleNext);
  }

  // Indicator click handlers
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => changeVideo(index));
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      handlePrevious();
    } else if (e.key === 'ArrowRight') {
      handleNext();
    }
  });

  // Touch swipe support
  let touchStartX = 0;
  let touchEndX = 0;

  videoElement?.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  }, { passive: true });

  videoElement?.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, { passive: true });

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        handleNext();
      } else {
        handlePrevious();
      }
    }
  }

  // Preload second video on page load
  if (typeof window !== 'undefined') {
    window.addEventListener('load', () => {
      preloadVideo(1);
    }, { once: true });
  }

  // Initialize indicators and navigation buttons
  updateIndicators(currentVideoIndex);
  updateNavigationButtons(currentVideoIndex);
  
  // Initialize content state for first video
  if (heroTitle) {
    heroTitle.classList.add('has-accent-below');
  }
</script>