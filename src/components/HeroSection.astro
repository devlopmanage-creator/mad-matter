---
// No props needed for this component
---

<section id="home">
  <!-- Background with optimized loading -->
  <div class="background">
    <img
      class="background-placeholder"
      id="heroPlaceholder"
      src="https://res.cloudinary.com/doleg7smw/image/upload/c_scale,w_1920,q_auto,f_auto/v1758771282/photo_2025-09-25_00-14-17_kspwix.jpg"
      alt="Building materials showcase"
      loading="eager"
      decoding="async"
      width="1920"
      height="1080"
    />
    <video
      class="background-video active"
      id="heroVideo"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      width="1920"
      height="1080"
    >
      <source src="https://res.cloudinary.com/doleg7smw/video/upload/c_scale,w_1920,q_auto,f_auto/v1758669242/Clip_1_kxpdba.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
    <div class="overlay"></div>
  </div>

  <!-- Content -->
  <div class="content">
    <div class="accent-wrapper" id="accentWrapper">
      <span class="accent" id="heroAccentTop">FAM BUILDING MATERIALS</span>
    </div>
    <h1 id="heroTitle">
      Where Luxury Meets Craftsmanship
      <span class="accent" id="heroAccentBottom">FAM BUILDING MATERIALS</span>
    </h1>
    <p id="heroDescription">
      High-end materials and fixtures crafted to enhance your home. Discover everything you need to redesign your spaces with beauty and lasting strength.
    </p>
  </div>

  <!-- Navigation Buttons -->
  <button class="nav-btn nav-btn-left" aria-label="Previous video" type="button">
    <span class="arrow" aria-hidden="true">‹</span>
  </button>
  <button class="nav-btn nav-btn-right" aria-label="Next video" type="button">
    <span class="arrow" aria-hidden="true">›</span>
  </button>

  <!-- Video indicators with progress bars -->
  <div class="video-indicators">
    <button class="indicator active" aria-label="Video 1" data-index="0">
      <i></i>
    </button>
    <button class="indicator" aria-label="Video 2" data-index="1">
      <i></i>
    </button>
  </div>

  <!-- Play/Pause Button -->
  <button class="videoplay" aria-label="Play/pause carousel" type="button">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 4H10V20H6V4Z" fill="white"/>
      <path d="M14 4H18V20H14V4Z" fill="white"/>
    </svg>
  </button>
</section>

<style>
  section {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .background {
    position: absolute;
    inset: 0;
    z-index: 0;
    overflow: hidden;
    background-color: #1a1a1a;
  }

  .background-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    inset: 0;
    z-index: 0;
    transform: scale(1.3) translateZ(0);
    will-change: opacity, transform;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    opacity: 0;
    transition: opacity 0.8s ease-in-out, transform 8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .background-video.active {
    opacity: 1;
    animation: subtleZoom 8s ease-out forwards;
  }

  .background-video.loading {
    opacity: 0.01;
  }

  @keyframes subtleZoom {
    0% {
      transform: scale(1.3) translateZ(0);
    }
    100% {
      transform: scale(1.35) translateZ(0);
    }
  }

  .background-placeholder {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    inset: 0;
    z-index: 1;
    transform: scale(1.3) translateZ(0);
    opacity: 1;
    transition: opacity 0.6s ease-out;
  }

  .background-placeholder.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
    z-index: 2;
  }

  .content {
    position: relative;
    z-index: 10;
    text-align: center;
    padding: 0 clamp(1rem, 4vw, 1.5rem);
    max-width: 64rem;
    margin: 0 auto;
    transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: opacity, transform;
  }

  .content-fade-out {
    opacity: 0;
    transform: translateY(15px);
  }

  .content-fade-in {
    animation: fadeInContent 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes fadeInContent {
    0% {
      opacity: 0;
      transform: translateY(20px) scale(0.98);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  h1 {
    font-family: 'Montserrat', sans-serif;
    font-size: clamp(1.75rem, 5vw, 3.75rem);
    font-weight: 300;
    color: white;
    margin-bottom: clamp(1rem, 3vw, 1.5rem);
    white-space: nowrap;
    overflow: visible;
    letter-spacing: 0.03em;
    line-height: 1.3;
    opacity: 0;
    transform: translateY(50px);
  }

  h1.multiline {
    white-space: normal;
    font-size: clamp(1.25rem, 3.5vw, 1.75rem);
    line-height: 1.4;
  }

  .accent-wrapper {
    display: none;
  }

  .accent-wrapper.show-top {
    display: block;
    margin-bottom: 1.5rem;
  }

  .accent-wrapper.show-top .accent {
    display: block;
    color: #e8d4a0;
    white-space: normal;
    font-weight: 600;
    letter-spacing: 0.12em;
    text-transform: uppercase;
    font-size: clamp(1.5rem, 6vw, 4rem);
    text-shadow: 0 2px 8px rgba(232, 212, 160, 0.25);
    margin: 0;
    line-height: 1.2;
  }

  .accent {
    display: block;
    margin-top: 0.5rem;
    color: #e8d4a0;
    white-space: normal;
    font-weight: 500;
    letter-spacing: 0.12em;
    text-transform: uppercase;
    font-size: 0.8em;
    text-shadow: 0 2px 8px rgba(232, 212, 160, 0.25);
  }

  h1.has-accent-below .accent {
    display: block;
  }

  h1.has-accent-above .accent {
    display: none;
  }

  p {
    font-family: 'Montserrat', sans-serif;
    font-size: clamp(0.95rem, 2.5vw, 1.25rem);
    font-weight: 300;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: clamp(1.5rem, 3vw, 2rem);
    max-width: 42rem;
    margin-left: auto;
    margin-right: auto;
    letter-spacing: 0.015em;
    line-height: 1.65;
    opacity: 0;
    transform: translateY(30px);
  }

  /* Navigation Buttons - JOMOO Style */
  .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%) translateZ(0);
    z-index: 50;
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    will-change: transform, background, opacity;
    opacity: 0;
    visibility: hidden;
  }

  section:hover .nav-btn {
    opacity: 1;
    visibility: visible;
  }

  .nav-btn:focus {
    outline: 2px solid rgba(255, 255, 255, 0.6);
    outline-offset: 3px;
  }

  .nav-btn .arrow {
    font-size: 24px;
    font-weight: 400;
    line-height: 0.9;
    color: white;
    pointer-events: none;
    display: block;
    margin-top: -2px;
  }

  .nav-btn:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
    transform: translateY(-50%) translateZ(0);
  }

  .nav-btn:active:not(:disabled) {
    transform: translateY(-50%) scale(0.9) translateZ(0);
  }

  .nav-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .nav-btn.hidden {
    opacity: 0 !important;
    visibility: hidden !important;
    pointer-events: none;
  }

  .nav-btn-left {
    left: 30px;
  }

  .nav-btn-right {
    right: 30px;
  }

  /* Video Indicators with Progress Bars */
  .video-indicators {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%) translateY(20px);
    z-index: 50;
    display: flex;
    gap: 8px;
    opacity: 0;
  }

  .indicator {
    width: 40px;
    height: 6px;
    border-radius: 3px;
    background: rgba(255, 255, 255, 0.3);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
    position: relative;
    overflow: hidden;
  }

  .indicator i {
    position: absolute;
    top: 0;
    left: 0;
    width: 0%;
    height: 100%;
    background: white;
    border-radius: 3px;
    transition: width 0.1s linear;
  }

  .indicator:hover {
    background: rgba(255, 255, 255, 0.4);
  }

  .indicator.active {
    background: rgba(255, 255, 255, 0.4);
  }

  .indicator:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
  }

  /* Play/Pause Button */
  .videoplay {
    position: absolute;
    bottom: 26px;
    right: 30px;
    width: 44px;
    height: 44px;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 50;
    transition: all 0.3s ease;
    will-change: transform, background, border-color;
    opacity: 0;
    transform: scale(0.8);
  }

  .videoplay:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
  }

  .videoplay:focus {
    outline: 2px solid rgba(255, 255, 255, 0.6);
    outline-offset: 3px;
  }

  .videoplay:active {
    transform: scale(0.9);
  }

  .videoplay svg {
    width: 16px;
    height: 16px;
  }

  .videoplay.paused {
    animation: pulsePause 2s ease-in-out infinite;
  }

  .videoplay.paused svg path {
    fill: rgba(232, 212, 160, 0.9);
  }

  /* Animations */
  @keyframes progressBarAnimation {
    from {
      width: 0%;
    }
    to {
      width: 100%;
    }
  }

  @keyframes pulsePause {
    0%, 100% {
      box-shadow: 0 0 15px rgba(232, 212, 160, 0.3);
      border-color: rgba(232, 212, 160, 0.6);
    }
    50% {
      box-shadow: 0 0 25px rgba(232, 212, 160, 0.5);
      border-color: rgba(232, 212, 160, 0.9);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .content {
      padding: 0 1.25rem;
    }

    h1 {
      margin-bottom: 1.25rem;
    }

    p {
      margin-bottom: 1.5rem;
    }

    .nav-btn {
      width: 40px;
      height: 40px;
      opacity: 1;
      visibility: visible;
    }

    .nav-btn .arrow {
      font-size: 20px;
    }

    .nav-btn-left {
      left: 16px;
    }

    .nav-btn-right {
      right: 16px;
    }

    .video-indicators {
      bottom: 20px;
      gap: 10px;
    }

    .indicator {
      width: 32px;
      height: 6px;
    }

    .videoplay {
      width: 40px;
      height: 40px;
      bottom: 20px;
      right: 16px;
    }

    .videoplay svg {
      width: 14px;
      height: 14px;
    }
  }

  @media (max-width: 480px) {
    .content {
      padding: 0 1rem;
    }

    h1 {
      margin-bottom: 1rem;
    }

    h1.multiline {
      line-height: 1.45;
    }

    p {
      margin-bottom: 1.25rem;
      line-height: 1.7;
    }

    .accent-wrapper.show-top {
      margin-bottom: 1rem;
    }

    .nav-btn {
      width: 44px;
      height: 44px;
    }

    .nav-btn .arrow {
      font-size: 20px;
    }

    .nav-btn-left {
      left: 12px;
    }

    .nav-btn-right {
      right: 12px;
    }

    .video-indicators {
      bottom: 16px;
      gap: 8px;
    }

    .indicator {
      width: 28px;
      height: 5px;
    }

    .videoplay {
      width: 44px;
      height: 44px;
      bottom: 16px;
      right: 12px;
    }

    .videoplay svg {
      width: 14px;
      height: 14px;
    }
  }

  /* Performance optimizations for mobile */
  @media (prefers-reduced-motion: reduce) {
    .background-video,
    .background-placeholder,
    .nav-btn,
    .indicator {
      transition: none;
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  
  // Video carousel with optimizations
  const videos = [
    'https://res.cloudinary.com/doleg7smw/video/upload/c_scale,w_1920,q_auto,f_auto/v1758669242/Clip_1_kxpdba.mp4',
    'https://res.cloudinary.com/doleg7smw/video/upload/v1759340239/WONDA_MOVIE__dlaopm.mp4'
  ];

  // Content for each video
  const videoContent = [
    {
      title: 'Where Luxury Meets Craftsmanship',
      accent: 'FAM BUILDING MATERIALS',
      description: 'High-end materials and fixtures crafted to enhance your home. Discover everything you need to redesign your spaces with beauty and lasting strength.'
    },
    {
      title: 'Unbelievable, a sink unlike any other. Defined by innovation, distinguished by design, and unmatched in its uniqueness.',
      accent: 'WONDA',
      description: "It's not just exceptional; it's a WONDA."
    }
  ];

  let currentVideoIndex = 0;
  let isTransitioning = false;
  let autoplayInterval: number | null = null;
  let isAutoplayActive = true;
  const autoplayDelay = 8000; // 8 seconds
  
  const videoElement = document.getElementById('heroVideo') as HTMLVideoElement;
  const placeholderElement = document.getElementById('heroPlaceholder') as HTMLImageElement;
  const prevBtn = document.querySelector('.nav-btn-left') as HTMLButtonElement;
  const nextBtn = document.querySelector('.nav-btn-right') as HTMLButtonElement;
  const indicators = document.querySelectorAll('.indicator') as NodeListOf<HTMLButtonElement>;
  const playPauseBtn = document.querySelector('.videoplay') as HTMLButtonElement;
  const heroTitle = document.getElementById('heroTitle') as HTMLHeadingElement;
  const heroAccentTop = document.getElementById('heroAccentTop') as HTMLSpanElement;
  const heroAccentBottom = document.getElementById('heroAccentBottom') as HTMLSpanElement;
  const heroDescription = document.getElementById('heroDescription') as HTMLParagraphElement;
  const accentWrapper = document.getElementById('accentWrapper') as HTMLDivElement;

  // Hide placeholder when video loads
  if (videoElement && placeholderElement) {
    videoElement.addEventListener('loadeddata', () => {
      placeholderElement.classList.add('hidden');
      videoElement.classList.add('active');
    }, { once: true });
  }

  // Preload next video for smoother transitions
  function preloadVideo(index: number) {
    if (index >= 0 && index < videos.length) {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'video';
      link.href = videos[index];
      document.head.appendChild(link);
    }
  }

  // Update indicators
  function updateIndicators(index: number) {
    indicators.forEach((indicator, i) => {
      const isActive = i === index;
      indicator.classList.toggle('active', isActive);
      indicator.setAttribute('aria-pressed', String(isActive));
      
      // Reset progress bar
      const progressBar = indicator.querySelector('i');
      if (progressBar) {
        (progressBar as HTMLElement).style.width = '0%';
      }
    });
  }

  // Start progress bar animation for active indicator
  function startProgressBar() {
    const activeIndicator = document.querySelector('.indicator.active i') as HTMLElement;
    if (activeIndicator && isAutoplayActive) {
      activeIndicator.style.transition = `width ${autoplayDelay}ms linear`;
      activeIndicator.style.width = '100%';
    }
  }

  // Reset all progress bars
  function resetProgressBars() {
    indicators.forEach(indicator => {
      const progressBar = indicator.querySelector('i') as HTMLElement;
      if (progressBar) {
        progressBar.style.transition = 'none';
        progressBar.style.width = '0%';
      }
    });
  }

  // Start autoplay
  function startAutoplay() {
    stopAutoplay();
    isAutoplayActive = true;
    startProgressBar();
    
    autoplayInterval = window.setInterval(() => {
      const nextIndex = (currentVideoIndex + 1) % videos.length;
      changeVideo(nextIndex);
    }, autoplayDelay);
  }

  // Stop autoplay
  function stopAutoplay() {
    if (autoplayInterval !== null) {
      clearInterval(autoplayInterval);
      autoplayInterval = null;
    }
    isAutoplayActive = false;
    resetProgressBars();
  }

  // Toggle autoplay with play/pause button
  function toggleAutoplay() {
    if (isAutoplayActive) {
      stopAutoplay();
      // Update button to show play icon
      if (playPauseBtn) {
        playPauseBtn.innerHTML = `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 5V19L19 12L8 5Z" fill="white"/>
          </svg>
        `;
        playPauseBtn.classList.add('paused');
      }
    } else {
      startAutoplay();
      // Update button to show pause icon
      if (playPauseBtn) {
        playPauseBtn.innerHTML = `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6 4H10V20H6V4Z" fill="white"/>
            <path d="M14 4H18V20H14V4Z" fill="white"/>
          </svg>
        `;
        playPauseBtn.classList.remove('paused');
      }
    }
  }

  // Update navigation buttons visibility
  function updateNavigationButtons(index: number) {
    // Hide left button if on first video
    if (prevBtn) {
      prevBtn.classList.toggle('hidden', index === 0);
    }
    
    // Hide right button if on last video
    if (nextBtn) {
      nextBtn.classList.toggle('hidden', index === videos.length - 1);
    }
  }

  // Update content based on video index
  function updateContent(index: number) {
    const content = videoContent[index];
    if (!content) return;

    // Add fade out effect
    const contentElement = document.querySelector('.content') as HTMLElement;
    contentElement?.classList.add('content-fade-out');

    setTimeout(() => {
      // Update text content
      if (heroTitle) {
        // Get only text nodes, not the accent span
        const titleText = heroTitle.childNodes[0];
        if (titleText) {
          titleText.textContent = content.title + ' ';
        }
        
        // Add multiline class for second video (WONDA)
        if (index === 1) {
          heroTitle.classList.add('multiline');
          heroTitle.classList.add('has-accent-above');
          heroTitle.classList.remove('has-accent-below');
        } else {
          heroTitle.classList.remove('multiline');
          heroTitle.classList.remove('has-accent-above');
          heroTitle.classList.add('has-accent-below');
        }
      }
      
      // Show accent at top for WONDA (video 2), otherwise hide
      if (accentWrapper) {
        if (index === 1) {
          accentWrapper.classList.add('show-top');
        } else {
          accentWrapper.classList.remove('show-top');
        }
      }
      
      // Update both accent elements
      if (heroAccentTop) {
        heroAccentTop.textContent = content.accent;
      }
      if (heroAccentBottom) {
        heroAccentBottom.textContent = content.accent;
      }
      if (heroDescription) {
        heroDescription.textContent = content.description;
      }

      // Remove fade out and add fade in
      contentElement?.classList.remove('content-fade-out');
      contentElement?.classList.add('content-fade-in');
      
      setTimeout(() => {
        contentElement?.classList.remove('content-fade-in');
      }, 600);
    }, 300);
  }

  // Change video with smooth transition
  async function changeVideo(newIndex: number) {
    if (isTransitioning || newIndex === currentVideoIndex) return;
    
    // Validate index
    if (newIndex < 0 || newIndex >= videos.length) return;
    
    isTransitioning = true;
    
    // Stop autoplay during transition
    const wasAutoplayActive = isAutoplayActive;
    stopAutoplay();
    
    // Disable buttons during transition
    if (prevBtn) prevBtn.disabled = true;
    if (nextBtn) nextBtn.disabled = true;

    try {
      // Fade out current video
      videoElement.classList.remove('active');
      
      // Wait for fade out
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Change video source
      const sourceElement = videoElement.querySelector('source') as HTMLSourceElement;
      if (sourceElement) {
        sourceElement.src = videos[newIndex];
        videoElement.load();
        
        // Wait for video to be ready
        await new Promise<void>((resolve, reject) => {
          const onCanPlay = () => {
            videoElement.removeEventListener('canplay', onCanPlay);
            videoElement.removeEventListener('error', onError);
            resolve();
          };
          
          const onError = () => {
            videoElement.removeEventListener('canplay', onCanPlay);
            videoElement.removeEventListener('error', onError);
            reject(new Error('Video load failed'));
          };
          
          videoElement.addEventListener('canplay', onCanPlay, { once: true });
          videoElement.addEventListener('error', onError, { once: true });
        });
        
        // Play and fade in
        await videoElement.play();
        videoElement.classList.add('active');
        
        currentVideoIndex = newIndex;
        updateIndicators(currentVideoIndex);
        updateNavigationButtons(currentVideoIndex);
        updateContent(currentVideoIndex);
        
        // Preload next video
        const nextIndex = (currentVideoIndex + 1) % videos.length;
        preloadVideo(nextIndex);
        
        // Restart autoplay if it was active
        if (wasAutoplayActive) {
          startAutoplay();
        }
      }
    } catch (error) {
      console.error('Error changing video:', error);
      // Fallback: show current video again
      videoElement.classList.add('active');
      // Restart autoplay if it was active
      if (wasAutoplayActive) {
        startAutoplay();
      }
    } finally {
      isTransitioning = false;
      
      // Re-enable buttons
      if (prevBtn) prevBtn.disabled = false;
      if (nextBtn) nextBtn.disabled = false;
    }
  }

  // Navigation handlers
  function handlePrevious() {
    const newIndex = currentVideoIndex === 0 ? videos.length - 1 : currentVideoIndex - 1;
    changeVideo(newIndex);
  }

  function handleNext() {
    const newIndex = (currentVideoIndex + 1) % videos.length;
    changeVideo(newIndex);
  }

  // Event listeners
  if (prevBtn) {
    prevBtn.addEventListener('click', handlePrevious);
  }

  if (nextBtn) {
    nextBtn.addEventListener('click', handleNext);
  }

  // Play/Pause button
  if (playPauseBtn) {
    playPauseBtn.addEventListener('click', toggleAutoplay);
  }

  // Indicator click handlers
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => changeVideo(index));
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      handlePrevious();
    } else if (e.key === 'ArrowRight') {
      handleNext();
    }
  });

  // Touch swipe support
  let touchStartX = 0;
  let touchEndX = 0;

  videoElement?.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  }, { passive: true });

  videoElement?.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, { passive: true });

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        handleNext();
      } else {
        handlePrevious();
      }
    }
  }

  // Initial page load animations with GSAP (exactly like design.astro)
  document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit like in design.astro
    setTimeout(function() {
      console.log('GSAP loaded, initializing hero animations...');
      
      // Initial page load animations (like design.astro home-banner)
      gsap.to('#heroTitle', {
        duration: 1.2,
        y: 0,
        opacity: 1,
        ease: 'power3.out',
        delay: 0.3
      });
      
      gsap.to('#heroDescription', {
        duration: 1,
        y: 0,
        opacity: 1,
        ease: 'power3.out',
        delay: 0.6
      });
      
      // Animate navigation buttons
      gsap.to('.nav-btn', {
        duration: 0.8,
        opacity: 1,
        ease: 'power3.out',
        delay: 0.8
      });
      
      // Animate indicators
      gsap.to('.video-indicators', {
        duration: 0.8,
        x: '-50%',
        y: 0,
        opacity: 1,
        ease: 'power3.out',
        delay: 0.9
      });
      
      // Animate play/pause button
      gsap.to('.videoplay', {
        duration: 0.8,
        scale: 1,
        opacity: 1,
        ease: 'back.out(1.7)',
        delay: 1
      });
    }, 100);
  });

  // Preload second video on page load
  if (typeof window !== 'undefined') {
    window.addEventListener('load', () => {
      preloadVideo(1);
      // Start autoplay after animations (1.5s like design.astro)
      setTimeout(() => {
        startAutoplay();
      }, 1500);
    }, { once: true });
  }

  // Initialize indicators and navigation buttons
  updateIndicators(currentVideoIndex);
  updateNavigationButtons(currentVideoIndex);
  
  // Initialize content state for first video
  if (heroTitle) {
    heroTitle.classList.add('has-accent-below');
  }

  // Pause autoplay when user hovers over the section
  const heroSection = document.querySelector('section') as HTMLElement;
  if (heroSection) {
    heroSection.addEventListener('mouseenter', () => {
      if (isAutoplayActive) {
        const activeIndicator = document.querySelector('.indicator.active i') as HTMLElement;
        if (activeIndicator) {
          activeIndicator.style.animationPlayState = 'paused';
        }
      }
    });

    heroSection.addEventListener('mouseleave', () => {
      if (isAutoplayActive) {
        const activeIndicator = document.querySelector('.indicator.active i') as HTMLElement;
        if (activeIndicator) {
          activeIndicator.style.animationPlayState = 'running';
        }
      }
    });
  }
</script>